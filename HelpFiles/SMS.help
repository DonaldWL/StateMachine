SMS is a system that creates a memory layout of the state machine tables.
It does not generate the source files for you.  For this see the Generator
package.

SMS takes a simple input file that defines your state machine.  It produces
tables and variables that help you generate the state machine you wish.
SMS is not language specific.  It does require you to define the target
language, but to be honest this is not really required, its just to make
sure that SMS and the Generator package are sync'd.  Examples will not
be shown in this file, you will find a directory called Examples.  This
contains one SMS file for all three examples.  This shows you that one
SMS file can be used to create your state machine in several languages.

In the SMS file you define your states and how they transition.  Each 
state that you define must have at least one transition.  Each state 
must also have associated with it a code block.  The code block is the
code that you write that implements what the state it trying to do. Keep
in mind that a code block can be associated with as many states as you
wish.  The examples do not do this, but this is very common when creating
a state machine.

SYNTAX

  Each command must be on its own line, thus the '\n' before <cmd>.
  
    <cmds>             ::= <cmd> [\n<cmd>...]  
    <cmd>              ::= {<Author>|<StateDefinition>|<CodeBlock>|<CodeBlocks>|
                           <CodeBlockType>|<Date>|<Language>|<SMSFileVersion>|
                           <StateMachineName>|<Version>}
    <Author>           ::= @Author <string>
    <StateDefinition>  ::= @BeginStates <StartState> [<EndState>]\n<StateDef>[\n<StateDef>...]\n@EndStates
    <StartState>       ::= <name>
    <EndState>         ::= <name>
    <CodeBlock>        ::= @CodeBlock <CodeBlockName> [<CTypes>]
    <CodeBlocks>       ::= @CodeBlocks <CodeBlockName> [<CodeBlockName>...]
    <CodeBlockType>    ::= @CodeBlockTypes <CTypes>
    <CTypes>           ::= {Code|Method}
    <Date>             ::= @Date <string>
    <Language>         ::= @Language {C|CPP|Python} [{C|CPP|Python}...]
    <SMSFileVersion>   ::= @SMSFileVersion 1.0
    <StateMachineName> ::= @StateMachineName <string>
    <Version>          ::= @Version <string>
    <StateDef>         ::= @State <StateName> <CodeBlockName>\n<StateTrans>[\n<StateTrans>...]
    <StateTrans>       ::= {<digits>|OtherWise} {=>|->} <StateName>
    <StateName>        ::= <name>
    <CodeBlockName>    ::= <name>
    <name>             ::= Any ascii char... but whitspace
    <string>           ::= Any ascii char...
    <digits>            ::= Any ascii digit (0-9)...
    
    The above is not a correct BNF, but close enough.  The SMS file has several strict requirements.
    The first line must be '@SMSFileVersion'.  The <string> after this must be the version of the SMS
    system that this file is targeted for.  Currently that is only '1.0'.  The second line in the
    file must be '@Language'.  You can have one language or as many as you wish.  You must have 
    defined at least one code block and also at least one state.  Otherwise nothing to generate.
    The default for @CodeBlockTypes is 'Code'.
    
    Below is a very simple file to show you how it works.  Also, see the Example SMS file.  Comments
    are allowed on a line by itself or after the command, like Python.  Comments start with '#', just
    like Python.
    
      @SMSFileVersion 1.0
      @Language Python CPP C  

        # Define all the code blocks.  You can do each one with @CodeBlock or just
        # define all of the with @CodeBlocks.  The advantage of @CodeBlock is you can
        # set the type of code block.  This really is only for Python code.  C and CPP
        # do not care.  See why in the help for the Generator package.   
      @CodeBlock StartMachine Method
      @CodeBlocks CodeBlock1 CodeBlock2 CodeBlock3
      @CodeBlocks CodeBlock4 CEnd CErr
 
      @BeginStates StartState EndState
          @State StartState StartMachine
            0 -> State1
            1 -> EndState
          
          @State State1 CodeBlock1
            0 -> State2
            1 -> EndState
            OtherWise -> ErrState
            
          @State ErrState CErr
            0 -> EndState
            
          @State EndState CEnd
            0 -> CEnd
      @EndStates
      
    The above is a very simple state machine.  The start state is 'StartState', thus 
    when the state machine starts up that is the first state to be executed.  We have
    defined an end state also called 'EndState'.  Based on your implementation of the
    state machine you may not need an end state.  See the Generator package.  The 
    'StartState' has two transitions, one to "State1' and one to 'EndState'.  The 
    number is what is set by the code block 'StartMachine'.  You can follow the other
    states yourself.  Its not that complicated.

USING PACKAGE SMS

  The package is made up of several classes and functions that you use to process 
  and handle the results of the run.  
  
    CSMSProcess
      This is the main class that is used to process the sms file.  Create an instance
      and then execute the method 'Process'.  After this is done, assuming no errors 
      you can look at the results that are stored in the class 'CSMSResults'.  This is
      just a holding class of data.  To get the results the property 'Result'.  It
      returns an instance of 'CSMSResults'.
    
    CSMSResults
      Is the results holding class.
      
    SMSReport
      Is a function that can generate a report using CSMSResult.  
      
    SMSSyntaxError
      An exception if syntax error found in SMS file.
      
    SMSFileVersionError
      An exception if the SMS file version is not handled by this version of SMS
      
  To see how this package is used review the program 'Gen.py'.  It shows how to run
  SMS and output the results.
