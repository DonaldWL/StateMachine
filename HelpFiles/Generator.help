Generator package is used to process TPL files and create you source files
for the state machine.  TPL files are just files with tags in them that
get replaced with the required data.  Not all tags can be used for all
language's.  Code, comments strings it does not matter the generator just
search's for the tags and executes the code that is related to the tag.
Thus, you can have the tag in a string, in a comment....  

One mandatory requirement for each TPL file is the first line must
contain the language that the file is for.

  @@C@@
  @@CPP@@
  @@Python@@
  
  To stop syntax errors put this in a comment on the first line of the
  file.  It will not show up in the STM files.

To understand how this is used, see the examples that have been done in
C, CPP and Python.  All three examples do basically the same thing from 
the same SMS file.  Also to see how to use this package see the program
'Gen'.  It is a driver for SMS and Generator. 

A tag is of a very simple format:

  @@<tag>[:<offset>]@@
    <tag>    is the name of the tag
    <offset> is the offset to use from column 1.  i.e., if you wish
             to force the offset to be at the start if the line then
             set this to 0.  If you do not give an <offset> then 
             the offset is figured out by the indent of the first 
             '@'.  All tags support this, but some do not use it.
             
  TAGS
  
    ALL LANGUAGES
    
      ClassDefinition (Python and CPP)
        Will write the class definition out.  This is the complete
        definition not just the name.  The name of the class will
        be from the SMS file '@StateMachineName'.  Because C and
        CPP use the same code if you do use this in C it will 
        produce the class.
        
          @@ClassDefinition:0@@
            Produces for CPP or C
              class CStateMachine
            Produces for Python
              class CTheStateMachine(CStateMachine):
      
      ClassName (Python and CPP)
        Replaces this tag with the class name from SMS file '@StateMachineName'.
        
          class @@ClassName@@ ...
            For all languages just does a simple replace.
                   
      CodeBlocks
        Does a full replacement of the line and produces the code blocks for you.
        For C and CPP this would just be used to fill in the switch statement with
        the code block name as a case entry and then a break.  This is not normally
        used for C and CPP.  For python it can be very affective with you have 
        defined your special code blocks that need to be used to execute your
        methods.  You need to see the package PythonBase to understand why this is
        done.
        
      CodeBlockNames
        Creates a list of names of each code block, this is used for tracing.
        
      CodeBlockTable (Python)
        Creates a special table that is used to execute the code blocks.
        
      CreationDate
        Does a simple replacement of the current date in the simple format of
        "%m/%d/%y".
        
      EndState
        Replaces the line with the end state variable and its value.  This is 
        not needed in C and CPP but can still be used, if you have special need.
        
      EndStateValue
        Replaces the value with the EndState value.  Thus, you can create a
        variable and have it set to the same value as EndState.
        
      RemoveLine
        Removes the current line.  This is used if you are trying to make you
        TPL file compilable.  Thus you can add lines that will help it have
        valid syntax but after generated will be removed.  The best way to do
        this is have a comment at the end of the line that has this tag in it.
        
      ReplaceLine
        This is used to replace a line with your data.  Normally you do this
        with a comment.  It goes along with RemoveLine.  
        
          int a = 1; // @@ReplaceLine@@ int a = 10;
          
        The above will take all the characters after @@ReplaceLine@@ and make
        it the line.
        
      SMSUserAuthor
        Is the user from SMS file @Author and replace the tag in line.
        
      SMSUserDate
        Is the user date from SMS file @Date and replace the tag in line.
        
      SMSUserVersion
        Is the user version from SMS file @Version and replace the tag in line.
        
      SMSFileVersion
        Is the file version from SMS file @SMSFileVersion and replace the tag 
        in line.
        
      StateNames
        Creates a table of strings that contain all the names of states.  This
        is used for trace in the state machine.
        
      StateTable
        Produces the state table.  The state table is used to contain each state
        and its transitions to other states.  How this table is implemented 
        depends on the language.
        
      StartState
        Replaces the line with the start state variable and its value.  This is 
        not needed in C and CPP but can still be used, if you have special need.
      
      StartStateValue
        Replaces the value with the StartState value.  Thus, you can create a
        variable and have it set to the same value as StartState.


GENERATOR PACKAGE

  The generator package has only one class you need to use.  It is very simple
  
    def __init__(self, Language, TPLDir, STMDir, OverWrite, LogFh, SMSResult):
  
    CGenerator(Language, TPLDir, STMDir, , OverWrite, LogFh, SMSResult)
      Language
        This is a string of the Language you are working with.  It can be either
        'Python' or 'CPP'.  Case is important.
      TPLDir
        Is the location of the set of TPL files that you wish to use.  It can have
        one or many files to process.  If None then use the default TPL files (not
        recommended)
      STMDir
        This is the directory to write the source files to from the processing of 
        the TPL files.
      OverWrite,
        If true then overwrite the STM files.
      LogFh
        Is a class that must contain a 'write' method that does not add an EOL to
        the passed in string.  If None then will default to sys.stdout.
      SMSResult
        This is the instance of the SMS class 'CSMSResults'.  You get this from the
        SMS system.  See CSMSProcess.Result, it returns the required instance after
        your have had the SMS process your SMS file.
        
    CGenerator.Process()
      This method will process all the TPL files and generate your STM files.

EXAMPLES:

  See the help files Example, ExampleC, ExampleCPP, and ExamplePython.  First read
  the Example help file, then pic the language you are going to use and read about
  the example given for that language.  Keep in mind these are examples to show you,
  you can use them as a starting point for you code.  C and CPP have files added
  to support what was being done.  You most likely will not need these.  They just
  help support the state machine user code.  For the C example one module is used
  to help trace 'String.c' and 'String.h'.  But you can change the trace code to
  be how you wish to log it and deal with strings.  The CPP example is written in
  C++17.  The actual state machine does not require C++17.  
  